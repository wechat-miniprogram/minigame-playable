{"version":3,"sources":["file:///Users/yuanzimin/Downloads/cocos-example-ball-master/assets/script/game/ball.ts"],"names":["_decorator","Component","Node","Vec3","Label","Prefab","ParticleSystem","Animation","Camera","ParticleUtils","find","Constants","utils","PoolManager","ccclass","property","_tempPos","Ball","type","currBoard","boardCount","jumpState","BALL_JUMP_STATE","JUMPUP","currBoardIdx","diffLevel","currJumpFrame","hasSprint","isTouch","touchPosX","movePosX","isJumpSpring","boardGroupCount","trailNode","timeScale","_wPos","start","game","node","on","EventType","TOUCH_START","onTouchStart","TOUCH_END","onTouchEnd","TOUCH_MOVE","onTouchMove","GAME_EVENT","RESTART","gameStart","updateBall","reset","onDestroy","off","update","deltaTime","Math","floor","normalDt","state","GAME_STATE","PLAYING","boardBox","boardManager","boardList","getBoardList","SPRINT","BALL_JUMP_FRAMES_SPRINT","clearDiamond","diamondSprintList","getDiamondSprintList","i","DIAMOND_NUM","abs","position","y","DIAMOND_SPRINT_SCORE_AREA","x","addScore","DIAMOND_SCORE","showScore","ball","playDiamondParticle","active","setPosY","setPosX","CAMERA_OFFSET_Y_SPRINT","cameraCtrl","setOriginPosY","board","pos","boardPos","getRadius","BOARD_HEIGTH","DIAMOND_SCORE_AREA","checkDiamond","FALLDOWN","PLAYER_MAX_DOWN_FRAMES","BOARD_GAP","stop","gameDie","isOnBoard","activeCurrBoard","BALL_JUMP_FRAMES_SPRING","BALL_JUMP_FRAMES","BOARD_TYPE","setOriginPosX","setTrailPos","touch","event","getLocation","playTrail","set","BOARD_INIT_POS","BALL_RADIUS","setPosition","eulerAngles","show","instance","getNode","trail02Prefab","parent","hide","boardType","getHeight","z","isActive","score","SCORE_BOARD_NOT_CENTER","NORMAL","DROP","BOARD_RADIUS_CENTER","SCORE_BOARD_CENTER","emit","HIDETIPS","l","BOARD_NEW_INDEX","newBoard","SPRING","setBump","setWave","setSpring","setDrop","c","CAMERA_OFFSET_Y","preType","coeff","getDiffCoeff","t","random","GIANT","scoreAniPrefab","cameraComp","getComponent","worldPosition","convertToUINode","getComponentInChildren","string","animationComponent","once","FINISHED","putNode","play","COEFF_POS_BALL","SCENE_MAX_OFFSET_X","currBoardPos","BALL_JUMP_STEP_SPRING","BALL_JUMP_STEP","step","BALL_JUMP_STEP_SPRINT","DIAMOND_START_FRAME","DIAMOND_SPRINT_STEP_Y","newDiamond","revive","clone","diamondParticle","diamondParticlePrefab","particleSystemComp","fun","isPlaying","unschedule","schedule"],"mappings":"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","sourcesContent":["\n/**\n * Copyright (c) 2019 Xiamen Yaji Software Co.Ltd. All rights reserved.\n * Created by daisy on 2019/06/25.\n */\nimport { _decorator, Component, Node, Touch, EventTouch, Vec3, Label, Prefab, ParticleSystem, Animation, Camera, ParticleUtils, find } from \"cc\";\nimport { Constants } from \"../data/constants\";\nimport { Board } from \"./board\";\nimport { utils } from \"../utils/utils\";\nimport { PoolManager } from \"../utils/pool-manager\";\nconst { ccclass, property } = _decorator;\n\n// 局部 vec3 变量复用\nconst _tempPos = new Vec3();\n\n@ccclass(\"Ball\")\nexport class Ball extends Component {\n    @property(Prefab)\n    diamondParticlePrefab: Prefab = null!;\n    @property({ type: Prefab })\n    scoreAniPrefab: Prefab = null!;\n    // @property({ type: Prefab })\n    // trail01Prefab: Prefab = null;\n\n    @property({ type: Prefab })\n    trail02Prefab: Prefab = null!;\n\n    currBoard: Board = null!; // 当前接触的板\n\n    boardCount = 0;\n    jumpState = Constants.BALL_JUMP_STATE.JUMPUP;\n    currBoardIdx = 0;\n    diffLevel = 1;\n    currJumpFrame = 0; // 当前跳跃频率（移动距离是以每帧移动*频率来判断）\n    hasSprint = false;\n    isTouch = false;\n\n    touchPosX = 0; // 点击屏幕位置 x\n    movePosX = 0; // 移动位置 x\n    isJumpSpring = false; // 处于弹簧版弹跳状态\n    boardGroupCount = 0;\n    trailNode: Node | null = null;\n    timeScale = 0;\n\n    _wPos = new Vec3();\n\n\n    start () {\n        Constants.game.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);\n        Constants.game.node.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        Constants.game.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        Constants.game.node.on(Constants.GAME_EVENT.RESTART, this.gameStart, this);\n\n        // @ts-ignore\n        // this.trailNode = PoolManager.instance.getNode(this.trail01Prefab, this.node.parent);\n        this.updateBall();\n        this.reset();\n    }\n\n    onDestroy() {\n        Constants.game.node.off(Node.EventType.TOUCH_START, this.onTouchStart, this);\n        Constants.game.node.off(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        Constants.game.node.off(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        Constants.game.node.off(Constants.GAME_EVENT.RESTART, this.gameStart, this);\n    }\n\n    update(deltaTime: number) {\n        this.timeScale = Math.floor((deltaTime / Constants.normalDt) * 100) / 100;\n        if (Constants.game.state === Constants.GAME_STATE.PLAYING) {\n            const boardBox = Constants.game.boardManager;\n            const boardList = boardBox.getBoardList();\n            if (this.jumpState === Constants.BALL_JUMP_STATE.SPRINT) {\n                // 冲刺状态结束后状态切换\n                if (this.currJumpFrame > Constants.BALL_JUMP_FRAMES_SPRINT) {\n                    this.jumpState = Constants.BALL_JUMP_STATE.JUMPUP;\n                    this.isJumpSpring = false;\n                    this.currJumpFrame = 0;\n                    this.hasSprint = false;\n                    // const eulerAngles = this.node.eulerAngles;\n                    // this.node.eulerAngles = new Vec3(eulerAngles.x, -Constants.BALL_SPRINT_STEP_Y, eulerAngles.z);\n                    boardBox.clearDiamond();\n                }\n\n                this.currJumpFrame += this.timeScale;\n                const diamondSprintList = boardBox.getDiamondSprintList();\n                for (let i = 0; i < Constants.DIAMOND_NUM; i++) {\n                    if (Math.abs(this.node.position.y - diamondSprintList[i].position.y) <= Constants.DIAMOND_SPRINT_SCORE_AREA && Math.abs(this.node.position.x - diamondSprintList[i].position.x) <= Constants.DIAMOND_SPRINT_SCORE_AREA) {\n                        Constants.game.addScore(Constants.DIAMOND_SCORE);\n                        this.showScore(Constants.DIAMOND_SCORE);\n                        Constants.game.ball.playDiamondParticle(this.node.position);\n                        diamondSprintList[i].active = false;\n                    }\n                }\n                this.setPosY();\n                this.setPosX();\n                // this.setRotY();\n                this.touchPosX = this.movePosX;\n                const y = this.node.position.y + Constants.CAMERA_OFFSET_Y_SPRINT;\n                Constants.game.cameraCtrl.setOriginPosY(y);\n            } else {\n                for (let i = this.currBoardIdx + 1; i >= 0; i--) {\n                    const board = boardList[i];\n                    const pos = this.node.position;\n                    const boardPos = boardList[i].node.position;\n                    if (Math.abs(pos.x - boardPos.x) <= boardList[i].getRadius() && Math.abs(pos.y - (boardPos.y + Constants.BOARD_HEIGTH)) <= Constants.DIAMOND_SCORE_AREA) {\n                        boardList[i].checkDiamond(pos.x);\n                    }\n\n                    // 超过当前跳板应该弹跳高度，开始下降\n                    if (this.jumpState === Constants.BALL_JUMP_STATE.FALLDOWN) {\n                        if (this.currJumpFrame > Constants.PLAYER_MAX_DOWN_FRAMES || (this.currBoard.node.position.y - pos.y) - (Constants.BOARD_GAP + Constants.BOARD_HEIGTH) > 0.001) {\n                            ParticleUtils.stop(this.trailNode!);\n                            Constants.game.gameDie();\n                            return;\n                        }\n\n                        // 是否在当前检测的板上\n                        if (this.isOnBoard(board)) {\n                            this.currBoard = board;\n                            this.currBoardIdx = i;\n                            this.activeCurrBoard();\n                            break;\n                        }\n                    }\n                }\n\n                this.currJumpFrame += this.timeScale;\n\n                if (this.jumpState === Constants.BALL_JUMP_STATE.JUMPUP) {\n                    if (this.isJumpSpring && this.currJumpFrame >= Constants.BALL_JUMP_FRAMES_SPRING) {\n                        // 处于跳跃状态并且当前跳跃高度超过弹簧板跳跃高度\n                        this.jumpState = Constants.BALL_JUMP_STATE.FALLDOWN;\n                        this.currJumpFrame = 0;\n                    } else {\n                        if (!this.isJumpSpring && this.currJumpFrame >= Constants.BALL_JUMP_FRAMES) {\n                            // 跳跃距离达到限制，开始下落\n                            this.jumpState = Constants.BALL_JUMP_STATE.FALLDOWN;\n                            this.currJumpFrame = 0;\n                        }\n                    }\n                }\n\n                this.setPosY();\n                this.setPosX();\n                // this.setRotZ();\n\n                if (this.currBoard.type !== Constants.BOARD_TYPE.SPRINT) {\n                    Constants.game.cameraCtrl.setOriginPosX(this.node.position.x);\n                }\n\n                this.touchPosX = this.movePosX;\n            }\n\n            this.setTrailPos();\n        }\n    }\n\n    onTouchStart(touch: Touch, event: EventTouch){\n        this.isTouch = true;\n        this.touchPosX = touch.getLocation().x;\n        this.movePosX = this.touchPosX;\n    }\n\n    onTouchMove(touch: Touch, event: EventTouch){\n        this.movePosX = touch.getLocation().x;\n    }\n\n    onTouchEnd(touch: Touch, event: EventTouch){\n        this.isTouch = false;\n    }\n\n    gameStart(){\n        this.playTrail();\n    }\n\n    reset() {\n        this.boardCount = 0;\n        this.diffLevel = 1;\n        _tempPos.set(Constants.BOARD_INIT_POS);\n        _tempPos.y += Constants.BALL_RADIUS + Constants.BOARD_HEIGTH / 2 - .001;\n        this.node.setPosition(_tempPos);\n        this.node.eulerAngles = new Vec3();\n        this.currJumpFrame = 0;\n        this.jumpState = Constants.BALL_JUMP_STATE.FALLDOWN;\n        this.hasSprint = false;\n        this.currBoardIdx = 0;\n        this.show();\n        this.setTrailPos();\n    }\n\n    updateBall() {\n        // PoolManager.instance.putNode(this.trailNode);\n\n        // @ts-ignore\n        this.trailNode = PoolManager.instance.getNode(this.trail02Prefab, this.node.parent);\n    }\n\n    show() {\n        this.node.active = true;\n    }\n\n    hide() {\n        this.node.active = false;\n    }\n\n    activeCurrBoard() {\n        const pos = this.node.position;\n        const boardPos = this.currBoard.node.position;\n        const boardType = this.currBoard.type;\n        const y = boardPos.y + Constants.BALL_RADIUS + this.currBoard.getHeight() / 2 - .01;\n        this.node.setPosition(pos.x, y, pos.z);\n        this.currJumpFrame = 0;\n        if (boardType === Constants.BOARD_TYPE.SPRINT) {\n            this.jumpState = Constants.BALL_JUMP_STATE.SPRINT;\n            // this.node.eulerAngles = new Vec3(this.node.eulerAngles.x, this.node.eulerAngles.y, 0);\n            Constants.game.cameraCtrl.setOriginPosX(boardPos.x);\n        } else {\n            this.jumpState = Constants.BALL_JUMP_STATE.JUMPUP;\n        }\n\n        if (!this.currBoard.isActive) {\n            this.currBoard.isActive = true;\n            let score = Constants.SCORE_BOARD_NOT_CENTER;\n            if (boardType !== Constants.BOARD_TYPE.NORMAL && boardType !== Constants.BOARD_TYPE.DROP || Math.abs(pos.x - boardPos.x) <= Constants.BOARD_RADIUS_CENTER) {\n                score = Constants.SCORE_BOARD_CENTER;\n            }\n\n            Constants.game.addScore(score);\n            this.showScore(score);\n            this.boardCount++;\n            if (this.boardCount === 5) {\n                Constants.game.node.emit(Constants.GAME_EVENT.HIDETIPS);\n            }\n\n            this.diffLevel += score / 2;\n            for (let l = this.currBoardIdx - Constants.BOARD_NEW_INDEX; l > 0; l--) {\n                this.newBoard();\n            }\n        }\n\n        this.isJumpSpring = boardType === Constants.BOARD_TYPE.SPRING;\n        this.currBoard.setBump();\n        this.currBoard.setWave();\n        if (boardType == Constants.BOARD_TYPE.SPRING || boardType == Constants.BOARD_TYPE.SPRINT) {\n            this.currBoard.setSpring()\n        }\n\n        // 掉落板开始掉落\n        const boardList = Constants.game.boardManager.getBoardList();\n        if (boardType === Constants.BOARD_TYPE.DROP) {\n            for (let l = 0; l < this.currBoardIdx; l++) {\n                boardList[l].setDrop();\n            }\n        }\n\n        const c = boardPos.y + Constants.CAMERA_OFFSET_Y;\n        Constants.game.cameraCtrl.setOriginPosY(c);\n        Constants.game.cameraCtrl.preType = boardType;\n    }\n\n    // 创建新跳板信息\n    newBoard() {\n        let type = Constants.BOARD_TYPE.NORMAL;\n        if (this.boardGroupCount <= 0) {\n            const coeff = utils.getDiffCoeff(this.diffLevel, 1, 10);\n            const t = Math.random() * coeff;\n            if (t < 4.2) {\n                type = Constants.BOARD_TYPE.NORMAL;\n                this.boardGroupCount = 2;\n            } else if (t <= 5.5) {\n                type = Constants.BOARD_TYPE.GIANT;\n                this.boardGroupCount = 3;\n            } else if (t <= 6.2) {\n                type = Constants.BOARD_TYPE.SPRING;\n                if (Math.random() > 0.5) {\n                    this.boardGroupCount = 2;\n                }\n            } else if (t <= 7) {\n                type = Constants.BOARD_TYPE.DROP;\n                this.boardGroupCount = 3\n            } else if (t <= 7.5 && false === this.hasSprint) {\n                type = Constants.BOARD_TYPE.SPRINT;\n                this.hasSprint = true;\n            } else {\n                type = Constants.BOARD_TYPE.NORMAL;\n            }\n        }\n        this.boardGroupCount--;\n        Constants.game.boardManager.newBoard(type, this.diffLevel);\n    }\n\n    // 界面上的弹跳分数\n    showScore(score: number) {\n        const node = PoolManager.instance.getNode(this.scoreAniPrefab, find('Canvas/resultUI')!);\n        const pos = new Vec3();\n        const cameraComp = Constants.game.cameraCtrl.node.getComponent(Camera)!;\n        this._wPos.set(this.node.worldPosition);\n        cameraComp.convertToUINode(this._wPos, find('Canvas/resultUI')!, pos);\n\n        pos.x += 50;\n        node.setPosition(pos);\n        node.getComponentInChildren(Label)!.string = `+${score}`;\n        const animationComponent = node.getComponent(Animation)!;\n        animationComponent.once(Animation.EventType.FINISHED, () => {\n            PoolManager.instance.putNode(node);\n        });\n        animationComponent.play();\n    }\n\n    setPosX() {\n        if (this.isTouch && this.touchPosX !== this.movePosX) {\n            _tempPos.set(this.node.position);\n            if (this.jumpState === Constants.BALL_JUMP_STATE.SPRINT) {\n                let x = (this.movePosX - this.touchPosX) * Constants.COEFF_POS_BALL;\n                this.node.setPosition(_tempPos.x + x, _tempPos.y, _tempPos.z);\n                _tempPos.set(this.node.position);\n                x = _tempPos.x;\n                let t = 1.3 * Constants.SCENE_MAX_OFFSET_X;\n                const currBoardPos = this.currBoard.node.position;\n                if (x > currBoardPos.x + t) {\n                    this.node.setPosition(currBoardPos.x + t, _tempPos.y, _tempPos.z);\n                } else if (x < this.currBoard.node.position.x - t) {\n                    this.node.setPosition(currBoardPos.x - t, _tempPos.y, _tempPos.z);\n                }\n            } else {\n                const x = (this.movePosX - this.touchPosX) * Constants.COEFF_POS_BALL;\n                this.node.setPosition(_tempPos.x + x, _tempPos.y, _tempPos.z);\n            }\n        }\n    }\n\n    // 垂直位置变化，每帧变动\n    setPosY() {\n        _tempPos.set(this.node.position);\n        // 跳跃状态处理\n        if (this.jumpState === Constants.BALL_JUMP_STATE.JUMPUP) {\n            if (this.isJumpSpring) {\n                _tempPos.y += Constants.BALL_JUMP_STEP_SPRING[Math.floor(this.currJumpFrame / 3)] * this.timeScale;\n            } else {\n                _tempPos.y += Constants.BALL_JUMP_STEP[Math.floor(this.currJumpFrame / 2)] * this.timeScale;\n            }\n            this.node.setPosition(_tempPos);\n            // 下落状态处理\n        } else if (this.jumpState === Constants.BALL_JUMP_STATE.FALLDOWN) {\n            if (this.currBoard.type === Constants.BOARD_TYPE.SPRING) {\n                if (this.currJumpFrame < Constants.BALL_JUMP_FRAMES_SPRING) {\n                    const step = Constants.BALL_JUMP_FRAMES_SPRING - this.currJumpFrame - 1;\n                    _tempPos.y -= Constants.BALL_JUMP_STEP_SPRING[Math.floor((step >= 0 ? step : 0)/ 3)] * this.timeScale;\n                } else {\n                    _tempPos.y -= Constants.BALL_JUMP_STEP_SPRING[0] * this.timeScale;\n                }\n            } else if (this.currJumpFrame < Constants.BALL_JUMP_FRAMES) {\n                const step = Constants.BALL_JUMP_FRAMES - this.currJumpFrame - 1;\n                _tempPos.y -= Constants.BALL_JUMP_STEP[Math.floor((step >= 0 ? step : 0) / 2)] * this.timeScale;\n            } else {\n                _tempPos.y -= Constants.BALL_JUMP_STEP[0] * this.timeScale;\n            }\n            this.node.setPosition(_tempPos);\n            // 冲刺跳跃状态处理\n        } else if (this.jumpState === Constants.BALL_JUMP_STATE.SPRINT) {\n            _tempPos.y += Constants.BALL_JUMP_STEP_SPRINT * this.timeScale;\n            this.node.setPosition(_tempPos);\n            if (this.currJumpFrame >= Constants.DIAMOND_START_FRAME + 20 && this.currJumpFrame <= Constants.BALL_JUMP_FRAMES_SPRINT - 50 && Math.floor(this.currJumpFrame) % Math.floor(Constants.DIAMOND_SPRINT_STEP_Y / Constants.BALL_JUMP_STEP_SPRINT) == 0) {\n                Constants.game.boardManager.newDiamond()\n            }\n\n        }\n    }\n\n    // 当前处于哪块板子上\n    isOnBoard(board: Board) {\n        const pos = this.node.position;\n        const boardPos = board.node.position;\n        const x = Math.abs(pos.x - boardPos.x);\n        const y = pos.y - boardPos.y;\n        // 在板子的半径内\n        if (x <= board.getRadius()) {\n            if (y >= 0 && y <= Constants.BALL_RADIUS + board.getHeight() / 2){\n                return true;\n            }\n\n            // 处于下落状态\n            if (this.isJumpSpring && this.currJumpFrame >= Constants.BALL_JUMP_FRAMES_SPRING) {\n                // 是否处于反弹后的第一次匀减速范围内\n                if (Math.abs(y) < Constants.BALL_JUMP_STEP_SPRING[0]) {\n                    return true;\n                }\n            } else if (!this.isJumpSpring && this.currJumpFrame >= Constants.BALL_JUMP_FRAMES){\n                if (Math.abs(y) < Constants.BALL_JUMP_STEP[0]){\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    revive() {\n        this.currBoardIdx--;\n        if (this.currBoard.type === Constants.BOARD_TYPE.SPRINT) {\n            this.currBoardIdx++;\n            this.currBoard = Constants.game.boardManager.getBoardList()[this.currBoardIdx];\n        }\n        this.currBoard.revive();\n        const pos = this.currBoard.node.position.clone();\n        pos.y += Constants.BALL_RADIUS + this.currBoard.getHeight() / 2 - .001;\n        this.node.setPosition(pos);\n        this.node.eulerAngles = new Vec3(0, 0, 0);\n        this.currJumpFrame = 0;\n        this.show();\n        const y = this.currBoard.node.position.y + Constants.CAMERA_OFFSET_Y;\n        Constants.game.cameraCtrl.setOriginPosX(pos.x);\n        Constants.game.cameraCtrl.setOriginPosY(y);\n        this.playTrail();\n        this.setTrailPos();\n    }\n\n    playDiamondParticle(pos: Vec3) {\n        // @ts-ignore\n        const diamondParticle = PoolManager.instance.getNode(this.diamondParticlePrefab, this.node.parent);\n        diamondParticle.setPosition(pos);\n        const particleSystemComp = diamondParticle.getComponent(ParticleSystem)!;\n        particleSystemComp.play();\n        const fun = () => {\n            if (!particleSystemComp.isPlaying) {\n                PoolManager.instance.putNode(diamondParticle);\n                this.unschedule(fun);\n            }\n        };\n        this.schedule(fun, 0.1);\n    }\n\n    playTrail(){\n        ParticleUtils.play(this.trailNode!);\n    }\n\n    setTrailPos() {\n        const pos = this.node.position;\n        this.trailNode!.setPosition(pos.x, pos.y - 0.1, pos.z);\n    }\n}\n"]}