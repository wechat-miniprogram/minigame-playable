{"version":3,"sources":["file:///Users/yuanzimin/Files/minigame-playable/demos/cocoscreator3-ball/assets/script/utils/pool-manager.ts"],"names":["_decorator","instantiate","NodePool","ccclass","property","PoolManager","dictPool","dictPrefab","instance","_instance","getNode","prefab","parent","name","data","node","hasOwnProperty","pool","size","get","putNode","put","clearPool","clear"],"mappings":";;;;;;;;;;AAUSA,MAAAA,U,OAAAA,U;AAA0BC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,Q,OAAAA,Q;;;;;oFAVhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;OAGM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;6BAGjBK,W,WADZF,OAAO,CAAC,aAAD,C,gBAAR,MACaE,WADb,CACyB;AAAA;AAAA,eACrBC,QADqB,GACoB,EADpB;AAAA,eAErBC,UAFqB,GAEoB,EAFpB;AAAA;;AAMF,mBAARC,QAAQ,GAAI;AACnB,cAAI,KAAKC,SAAT,EAAoB;AAChB,mBAAO,KAAKA,SAAZ;AACH;;AAED,eAAKA,SAAL,GAAiB,IAAIJ,WAAJ,EAAjB;AACA,iBAAO,KAAKI,SAAZ;AACH;AAED;AACJ;AACA;;;AACIC,QAAAA,OAAO,CAAEC,MAAF,EAAkBC,MAAlB,EAAgC;AACnC,cAAIC,IAAI,GAAGF,MAAM,CAACG,IAAP,CAAYD,IAAvB;AACA,eAAKN,UAAL,CAAgBM,IAAhB,IAAwBF,MAAxB;AACA,cAAII,IAAU,GAAG,IAAjB;;AACA,cAAI,KAAKT,QAAL,CAAcU,cAAd,CAA6BH,IAA7B,CAAJ,EAAwC;AACpC;AACA,gBAAII,IAAI,GAAG,KAAKX,QAAL,CAAcO,IAAd,CAAX;;AACA,gBAAII,IAAI,CAACC,IAAL,KAAc,CAAlB,EAAqB;AACjBH,cAAAA,IAAI,GAAGE,IAAI,CAACE,GAAL,EAAP;AACH,aAFD,MAEO;AACHJ,cAAAA,IAAI,GAAGd,WAAW,CAACU,MAAD,CAAlB;AACH;AACJ,WARD,MAQO;AACH;AACA,gBAAIM,KAAI,GAAG,IAAIf,QAAJ,EAAX;;AACA,iBAAKI,QAAL,CAAcO,IAAd,IAAsBI,KAAtB;AAEAF,YAAAA,IAAI,GAAGd,WAAW,CAACU,MAAD,CAAlB;AACH;;AAEDI,UAAAA,IAAI,CAACH,MAAL,GAAcA,MAAd;AACA,iBAAOG,IAAP;AACH;AAED;AACJ;AACA;;;AACIK,QAAAA,OAAO,CAAEL,IAAF,EAAc;AACjB,cAAIF,IAAI,GAAGE,IAAI,CAACF,IAAhB;AACA,cAAII,IAAI,GAAG,IAAX;;AACA,cAAI,KAAKX,QAAL,CAAcU,cAAd,CAA6BH,IAA7B,CAAJ,EAAwC;AACpC;AACAI,YAAAA,IAAI,GAAG,KAAKX,QAAL,CAAcO,IAAd,CAAP;AACH,WAHD,MAGO;AACH;AACAI,YAAAA,IAAI,GAAG,IAAIf,QAAJ,EAAP;AACA,iBAAKI,QAAL,CAAcO,IAAd,IAAsBI,IAAtB;AACH;;AAEDA,UAAAA,IAAI,CAACI,GAAL,CAASN,IAAT;AACH;AAED;AACJ;AACA;;;AACIO,QAAAA,SAAS,CAAET,IAAF,EAAgB;AACrB,cAAI,KAAKP,QAAL,CAAcU,cAAd,CAA6BH,IAA7B,CAAJ,EAAwC;AACpC,gBAAII,IAAI,GAAG,KAAKX,QAAL,CAAcO,IAAd,CAAX;AACAI,YAAAA,IAAI,CAACM,KAAL;AACH;AACJ;;AApEoB,O","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\nimport { _decorator, Prefab, Node, instantiate, NodePool } from \"cc\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"PoolManager\")\nexport class PoolManager {\n    dictPool: { [name: string]: NodePool } = {}\n    dictPrefab: { [name: string]: Prefab } = {}\n\n    static _instance: PoolManager;\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new PoolManager();\n        return this._instance;\n    }\n\n    /**\n     * 根据预设从对象池中获取对应节点\n     */\n    getNode (prefab: Prefab, parent: Node) {\n        let name = prefab.data.name as string;\n        this.dictPrefab[name] = prefab;\n        let node: Node = null!;\n        if (this.dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            let pool = this.dictPool[name];\n            if (pool.size() > 0) {\n                node = pool.get()!;\n            } else {\n                node = instantiate(prefab);\n            }\n        } else {\n            //没有对应对象池，创建他！\n            let pool = new NodePool();\n            this.dictPool[name] = pool;\n\n            node = instantiate(prefab);\n        }\n\n        node.parent = parent;\n        return node;\n    }\n\n    /**\n     * 将对应节点放回对象池中\n     */\n    putNode (node: Node) {\n        let name = node.name;\n        let pool = null;\n        if (this.dictPool.hasOwnProperty(name)) {\n            //已有对应的对象池\n            pool = this.dictPool[name];\n        } else {\n            //没有对应对象池，创建他！\n            pool = new NodePool();\n            this.dictPool[name] = pool;\n        }\n\n        pool.put(node);\n    }\n\n    /**\n     * 根据名称，清除对应对象池\n     */\n    clearPool (name: string) {\n        if (this.dictPool.hasOwnProperty(name)) {\n            let pool = this.dictPool[name];\n            pool.clear();\n        }\n    }\n}\n"]}