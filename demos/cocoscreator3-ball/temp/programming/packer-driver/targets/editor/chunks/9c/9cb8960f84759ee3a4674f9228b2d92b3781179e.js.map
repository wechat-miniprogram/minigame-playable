{"version":3,"sources":["file:///Users/yuanzimin/Files/minigame-playable/demos/cocoscreator3-ball/assets/script/game/board.ts"],"names":["_decorator","Component","Vec3","Prefab","instantiate","MeshRenderer","Color","Constants","utils","ccclass","property","_tempPos","Board","type","isActive","diamondList","BOARD_TYPE","NORMAL","wave","waveInner","waveOriginScale","currWaveFrame","currSpringFrame","currBumpFrame","BOARD_BUMP_FRAMES","springTop","springHelix","springHelixOriginScale","center","isMovingRight","hasDiamond","isMoving","posBeforeDrop","originScale","currDropFrame","BOARD_DROP_FRAMES","_game","onLoad","set","node","scale","initCenter","initWave","initSpring","initDiamond","update","effectBump","effectWave","SPRING","SPRINT","effectSpring","effectDrop","effectMove","effectDiamondRotate","reset","pos","level","setPosition","DROP","setMove","GIANT","setScale","x","BOARD_SCALE_GIANT","y","z","BOARD_HEIGTH_SCALE_DROP","position","active","setSpringPos","i","Math","random","game","initFirstBoard","setDiamondPos","setDrop","BOARD_DROP_STEP","setCenterPos","diamondPrefab","parent","addChild","BOARD_HEIGTH","hideDiamond","index","checkDiamond","flag","abs","DIAMOND_SCORE_AREA","ball","playDiamondParticle","addScore","DIAMOND_SCORE","eulerAngles","DIAMOND_ROTATE_STEP_Y","springHelixPrefab","getScale","BOARD_SPRING_FRAMES","springTopPrefab","clone","SPRING_HEIGHT","setSpring","SPRING_HELIX_STEP_SPIRNT","SPRING_HELIX_STEP","SPRING_TOP_STEP_SPRINT","SPRING_TOP_STEP","setBump","BOARD_BUMP_STEP","centerPrefab","wavePrefab","BOARD_WAVE_FRAMES","setWave","WAVE_OFFSET_Y","mat2","getComponent","material","pass","passes","hColor","getHandle","color","a","setUniform","BOARD_WAVE_INNER_START_FRAMES","sin","BOARD_WAVE_INNER_STEP","BOARD_WAVE_STEP","getHeight","getRadius","BOARD_RADIUS","BOARD_RADIUS_SCALE_GIANT","coeff","t","getDiffCoeff","getPosition","SCENE_MAX_OFFSET_X","BOARD_MOVING_STEP","revive"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2019 Xiamen Yaji Software Co.Ltd. All rights reserved.\n * Created by daisy on 2019/06/25.\n */\nimport { _decorator, Component, Node, Vec3, Prefab, instantiate, MeshRenderer, Color } from \"cc\";\nimport { Constants } from \"../data/constants\";\nimport { Game } from \"./game\";\nimport { utils } from '../utils/utils';\nconst { ccclass, property } = _decorator;\n\nconst _tempPos = new Vec3();\n\n@ccclass(\"Board\")\nexport class Board extends Component {\n\n    @property(Prefab)\n    diamondPrefab: Prefab = null!;\n\n    @property({ type: Prefab })\n    centerPrefab: Prefab = null!;\n\n    @property({ type: Prefab })\n    wavePrefab: Prefab = null!;\n\n    // 弹簧片\n    @property({ type: Prefab })\n    springTopPrefab: Prefab = null!;\n\n    // 弹簧\n    @property({ type: Prefab })\n    springHelixPrefab: Prefab = null!;\n\n    isActive = false;\n    diamondList: Node[] = [];\n    type = Constants.BOARD_TYPE.NORMAL;\n    wave: Node = null!;\n    waveInner: Node = null!;\n    waveOriginScale = new Vec3();\n    currWaveFrame = 0;\n    currSpringFrame = 0;\n    currBumpFrame = Constants.BOARD_BUMP_FRAMES;\n    springTop: Node = null!;\n    springHelix: Node = null!;\n    springHelixOriginScale = new Vec3();\n    center: Node = null!;\n    isMovingRight = true;\n    hasDiamond = false;\n    isMoving = false;\n    posBeforeDrop = new Vec3();\n    originScale = new Vec3();\n    currDropFrame = Constants.BOARD_DROP_FRAMES;\n\n    _game: Game = null!;\n\n    onLoad() {\n        this.originScale.set(this.node.scale);\n        this.initCenter();\n        this.initWave();\n        this.initSpring();\n        this.initDiamond();\n    }\n\n    update() {\n        this.effectBump();\n        this.effectWave();\n        if (this.type === Constants.BOARD_TYPE.SPRING || this.type === Constants.BOARD_TYPE.SPRINT) {\n            this.effectSpring();\n        }\n        this.effectDrop();\n        this.effectMove();\n        if (this.hasDiamond) {\n            this.effectDiamondRotate();\n        }\n    }\n\n    reset(type: number, pos: Vec3, level: number) {\n        this.isActive = false;\n        this.type = type;\n        this.node.setPosition(pos);\n        this.isMoving = false;\n        this.currDropFrame = Constants.BOARD_DROP_FRAMES;\n        // 按概率来决定是否是移动板\n        if (this.type === Constants.BOARD_TYPE.NORMAL || this.type === Constants.BOARD_TYPE.DROP || this.type === Constants.BOARD_TYPE.SPRING) {\n            this.isMoving = this.setMove(level);\n        }\n\n        if (this.type === Constants.BOARD_TYPE.GIANT) {\n            this.node.setScale(this.originScale.x * Constants.BOARD_SCALE_GIANT, this.originScale.y, this.originScale.z);\n        } else if (this.type === Constants.BOARD_TYPE.DROP) {\n            this.node.setScale(this.originScale.x, this.originScale.y * Constants.BOARD_HEIGTH_SCALE_DROP, this.originScale.z);\n            this.posBeforeDrop.set(this.node.position);\n        } else {\n            this.node.setScale(this.originScale);\n        }\n\n        this.springTop.active = false;\n        if (this.type === Constants.BOARD_TYPE.SPRING || this.type === Constants.BOARD_TYPE.SPRINT) {\n            this.springHelix.active = true;\n            this.springTop.active = true;\n            this.setSpringPos();\n        }\n\n        this.hasDiamond = false;\n        if (this.diamondList[0]) {\n            for (let i = 0; i < 5; i++) {\n                this.diamondList[i].active = false;\n            }\n\n            if (this.type === Constants.BOARD_TYPE.GIANT) {\n                for (let i = 0; i < 5; i++) {\n                    this.diamondList[i].active = true;\n                    this.hasDiamond = true;\n                }\n            } else if (this.type === Constants.BOARD_TYPE.NORMAL || this.type === Constants.BOARD_TYPE.DROP) {\n                if (Math.random() > .7) {\n                    this.diamondList[2].active = Constants.game.initFirstBoard;\n                    Constants.game.initFirstBoard = true;\n                    this.hasDiamond = true;\n                }\n            }\n\n            if (this.hasDiamond) {\n                this.setDiamondPos();\n            }\n        }\n    }\n\n    setDrop() {\n        this.currDropFrame = 0;\n        this.posBeforeDrop.set(this.node.position);\n    }\n\n    effectDrop() {\n        if (this.currDropFrame < Constants.BOARD_DROP_FRAMES) {\n            for (let i = 0; i < 5; i++) {\n                this.diamondList[i].active = false;\n            }\n\n            if (this.springTop.active) {\n                this.springHelix.active = false;\n                const pos = this.springTop.position;\n                this.springTop.setPosition(pos.x, pos.y - Constants.BOARD_DROP_STEP, pos.z);\n            }\n            _tempPos.set(this.node.position);\n            _tempPos.y -= Constants.BOARD_DROP_STEP;\n            this.node.setPosition(_tempPos);\n            this.setCenterPos();\n            this.currDropFrame++;\n        }\n    }\n\n    initDiamond() {\n        for (let i = 0; i < 5; i++) {\n            this.diamondList[i] = instantiate(this.diamondPrefab);\n            this.node.parent!.addChild(this.diamondList[i]);\n            this.diamondList[i].active = false;\n        }\n    }\n\n    setDiamondPos() {\n        const pos = new Vec3();\n        for (let i = 0; i < 5; i++) {\n            if (this.diamondList[i].active) {\n                pos.set(this.node.position);\n                pos.x += 1.4 * (i - 2);\n                pos.y += Constants.BOARD_HEIGTH;\n                this.diamondList[i].setPosition(pos);\n            }\n        }\n    }\n\n    hideDiamond(index: number) {\n        this.diamondList[index].active = false;\n    }\n\n    checkDiamond(x: number) {\n        if (this.hasDiamond) {\n            let flag = true;\n            for (let i = 0; i < 5; i++) {\n                if (this.diamondList[i].active) {\n                    flag = false;\n                    if (Math.abs(x - this.diamondList[i].position.x) <= Constants.DIAMOND_SCORE_AREA) {\n                        Constants.game.ball.playDiamondParticle(this.diamondList[i].position);\n                        this.hideDiamond(i);\n                        Constants.game.addScore(Constants.DIAMOND_SCORE);\n                    }\n                }\n            }\n            if (flag) {\n                this.hasDiamond = false;\n            }\n        }\n    }\n\n    // 钻石旋转\n    effectDiamondRotate() {\n        for (let i = 0; i < 5; i++) {\n            const eulerAngles = this.diamondList[i].eulerAngles;\n            this.diamondList[i].eulerAngles = new Vec3(eulerAngles.x, eulerAngles.y + Constants.DIAMOND_ROTATE_STEP_Y, eulerAngles.z);\n        }\n    }\n\n    initSpring() {\n        this.springHelix = instantiate(this.springHelixPrefab);\n        this.springHelixOriginScale = this.springHelix.getScale();\n        this.springHelix.setScale(1.5, 1, 1.5);\n        this.node.parent!.addChild(this.springHelix);\n        this.springHelix.active = false;\n        this.currSpringFrame = 2 * Constants.BOARD_SPRING_FRAMES;\n        this.springTop = instantiate(this.springTopPrefab);\n        this.node.parent!.addChild(this.springTop);\n        this.springTop.active = false;\n        const pos = this.node.position.clone();\n        pos.y += (Constants.BOARD_HEIGTH + Constants.SPRING_HEIGHT) / 2;\n        this.springTop.setPosition(pos);\n\n        this.setSpringPos();\n    }\n\n    setSpring() {\n        this.currSpringFrame = 0;\n        this.setSpringPos();\n        this.springHelix.setScale(1.5, 1, 1.5);\n        this.springHelix.active = true;\n        this.springTop.active = true;\n    }\n\n    setSpringPos() {\n        let pos = this.node.position.clone();\n        pos.y += Constants.BOARD_HEIGTH / 2;\n        this.springHelix.setPosition(pos);\n        pos = this.node.position.clone();\n        pos.y += (Constants.BOARD_HEIGTH + Constants.SPRING_HEIGHT) / 2;\n        this.springTop.setPosition(pos);\n    }\n\n    effectSpring() {\n        const z = this.type === Constants.BOARD_TYPE.SPRINT ? Constants.SPRING_HELIX_STEP_SPIRNT : Constants.SPRING_HELIX_STEP;\n        const y = this.type === Constants.BOARD_TYPE.SPRINT ? Constants.SPRING_TOP_STEP_SPRINT : Constants.SPRING_TOP_STEP;\n        const scale = this.springHelix.scale;\n        const pos = this.springTop.position;\n        if (this.currSpringFrame < Constants.BOARD_SPRING_FRAMES) {\n            this.springHelix.setScale(scale.x, scale.y + z, scale.z);\n            this.springTop.setPosition(pos.x, pos.y + y, pos.z);\n            this.currSpringFrame++;\n        } else if (this.currSpringFrame >= Constants.BOARD_SPRING_FRAMES && this.currSpringFrame < 2 * Constants.BOARD_SPRING_FRAMES) {\n            this.springHelix.setScale(scale.x, scale.y - z, scale.z);\n            this.springTop.setPosition(pos.x, pos.y - y, pos.z);\n            this.currSpringFrame++;\n        } else {\n            this.springHelix.active = false;\n        }\n    }\n\n    setBump() {\n        this.currBumpFrame = 0;\n    }\n\n    effectBump() {\n        if (this.currBumpFrame < Constants.BOARD_BUMP_FRAMES) {\n            const pos = this.node.position;\n            this.node.setPosition(pos.x, pos.y + Constants.BOARD_BUMP_STEP[this.currBumpFrame], pos.z);\n            this.setCenterPos();\n            this.currBumpFrame++;\n        }\n    }\n\n    initCenter() {\n        this.center = instantiate(this.centerPrefab);\n        this.node.parent!.addChild(this.center);\n        this.center.active = false;\n    }\n\n    setCenterPos() {\n        const pos = this.node.position.clone();\n        pos.y += Constants.BOARD_HEIGTH / 2;\n        this.center.setPosition(pos);\n    }\n\n    initWave() {\n        this.wave = instantiate(this.wavePrefab);\n        this.node.parent!.addChild(this.wave);\n        this.wave.active = false;\n        this.waveInner = instantiate(this.wavePrefab);\n        this.node.parent!.addChild(this.waveInner);\n        this.waveInner.active = false;\n        this.currWaveFrame = Constants.BOARD_WAVE_FRAMES;\n        this.waveOriginScale.set(this.wave.scale);\n    }\n\n    setWave() {\n        if (this.type != Constants.BOARD_TYPE.GIANT) {\n            this.currWaveFrame = 0;\n            const pos = this.node.position.clone();\n            pos.y += Constants.WAVE_OFFSET_Y;\n            this.wave.setPosition(pos);\n            this.wave.setScale(this.waveOriginScale.clone());\n            this.wave.active = true;\n            const mat2 = this.wave.getComponent(MeshRenderer)!.material;\n            // 初始化时保存以下变量\n            const pass = mat2!.passes[0];\n            const hColor = pass.getHandle('color');\n            const color = new Color('#dadada');\n            color.a = 127;\n            pass.setUniform(hColor, color);\n            this.waveInner.setPosition(pos);\n            this.waveInner.setScale(this.waveOriginScale.clone());\n        }\n    }\n\n    effectWave() {\n        if (this.currWaveFrame < Constants.BOARD_WAVE_FRAMES) {\n            if (this.currWaveFrame >= Constants.BOARD_WAVE_INNER_START_FRAMES) {\n                if (!this.waveInner.active) {\n                    this.waveInner.active = true;\n                }\n\n                const mat2 = this.waveInner.getComponent(MeshRenderer)!.material;\n                // 初始化时保存以下变量\n                const pass = mat2!.passes[0];\n                const hColor = pass.getHandle('color');\n                const color = new Color('#dadada');\n                color.a = 127 - Math.sin(this.currWaveFrame * 0.05) * 127;\n                pass.setUniform(hColor, color);\n\n                const scale = this.waveInner.getScale();\n                this.waveInner.setScale(scale.x + Constants.BOARD_WAVE_INNER_STEP, scale.y, scale.z + Constants.BOARD_WAVE_INNER_STEP);\n            }\n\n            const mat2 = this.wave.getComponent(MeshRenderer)!.material;\n            // 初始化时保存以下变量\n            const pass = mat2!.passes[0];\n            const hColor = pass.getHandle('color');\n            const color = new Color('#dadada');\n            color.a = 127 - Math.sin(this.currWaveFrame * 0.1) * 127;\n            pass.setUniform(hColor, color);\n            const scale = this.waveInner.getScale();\n            this.wave.setScale(scale.x + Constants.BOARD_WAVE_STEP, scale.y, scale.z + Constants.BOARD_WAVE_STEP);\n            this.currWaveFrame++;\n        } else {\n            this.wave.active = false;\n            this.waveInner.active = false;\n        }\n    }\n\n    getHeight() {\n        return this.type === Constants.BOARD_TYPE.DROP ? Constants.BOARD_HEIGTH * Constants.BOARD_HEIGTH_SCALE_DROP : Constants.BOARD_HEIGTH;\n    }\n\n    getRadius() {\n        return this.type === Constants.BOARD_TYPE.GIANT ? Constants.BOARD_RADIUS * Constants.BOARD_RADIUS_SCALE_GIANT : Constants.BOARD_RADIUS;\n\n    }\n\n    setMove(coeff: number): boolean {\n        const t = utils.getDiffCoeff(coeff, 1, 10);\n        return Math.random() * t > 5;\n    }\n\n    effectMove() {\n        if (this.isMoving) {\n            var pos = this.node.getPosition().clone();\n            var x = pos.x;\n            if (this.isMovingRight && x <= Constants.SCENE_MAX_OFFSET_X) {\n                x += Constants.BOARD_MOVING_STEP;\n                this.node.setPosition(x, pos.y, pos.z);\n            } else if (this.isMovingRight && x > Constants.SCENE_MAX_OFFSET_X) {\n                this.isMovingRight = false;\n            } else if (!this.isMovingRight && x >= - Constants.SCENE_MAX_OFFSET_X) {\n                x -= Constants.BOARD_MOVING_STEP;\n                this.node.setPosition(x, pos.y, pos.z);\n            } else if (!this.isMovingRight && x < - Constants.SCENE_MAX_OFFSET_X) {\n                this.isMovingRight = true\n            }\n            if (this.type === Constants.BOARD_TYPE.SPRING) {\n                this.springHelix.setPosition(this.node.position.x, this.springHelix.position.y, this.springHelix.position.z);\n                this.springTop.setPosition(this.node.position.x, this.springTop.position.y, this.springTop.position.z);\n            }\n            this.setCenterPos();\n            if (this.hasDiamond) {\n                this.setDiamondPos();\n            }\n        }\n    }\n\n    revive() {\n        this.isActive = false;\n        this.isMoving = false;\n        if (this.type === Constants.BOARD_TYPE.DROP) {\n            this.currDropFrame = Constants.BOARD_DROP_FRAMES;\n            this.node.setPosition(this.posBeforeDrop);\n        }\n    }\n}\n"]}